import { NextRequest, NextResponse } from 'next/server';
import { dbGet, dbRun } from '@/lib/db';
import { initializeDatabase } from '@/lib/init-db';
import fs from 'fs';
import path from 'path';

export async function GET(request: NextRequest) {
  try {
    await initializeDatabase();

    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env.local —Ñ–∞–π–ª–∞
    const envPath = path.join(process.cwd(), '.env.local');
    let envContent = '';

    try {
      envContent = fs.readFileSync(envPath, 'utf8');
    } catch (error) {
      console.error('Error reading .env.local:', error);
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    const telegramBotToken = getEnvValue(envContent, 'TELEGRAM_BOT_TOKEN') || '';
    const telegramBotUsername = getEnvValue(envContent, 'TELEGRAM_BOT_USERNAME') || '';
    const nextPublicTelegramBotUsername = getEnvValue(envContent, 'NEXT_PUBLIC_TELEGRAM_BOT_USERNAME') || '';

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram
    const telegramUsersCount = await dbGet(
      'SELECT COUNT(*) as count FROM users WHERE auth_method = ?',
      ['telegram']
    );

    const totalUsersCount = await dbGet(
      'SELECT COUNT(*) as count FROM users'
    );

    return NextResponse.json({
      success: true,
      settings: {
        botToken: telegramBotToken,
        botUsername: telegramBotUsername,
        publicBotUsername: nextPublicTelegramBotUsername,
      },
      stats: {
        telegramUsers: telegramUsersCount.count,
        totalUsers: totalUsersCount.count,
        telegramPercentage: totalUsersCount.count > 0
          ? Math.round((telegramUsersCount.count / totalUsersCount.count) * 100)
          : 0,
      },
    });
  } catch (error) {
    console.error('Get Telegram settings error:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    await initializeDatabase();

    const { botToken, botUsername } = await request.json();

    if (!botToken || !botUsername) {
      return NextResponse.json(
        { error: 'Bot token –∏ username –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env.local —Ñ–∞–π–ª
    const envPath = path.join(process.cwd(), '.env.local');
    let envContent = '';

    try {
      envContent = fs.readFileSync(envPath, 'utf8');
    } catch (error) {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
      envContent = `# JWT Secret for authentication
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# Database
DATABASE_URL=./database.sqlite

# Next.js
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your-nextauth-secret-key

# Telegram Bot Configuration
`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    envContent = setEnvValue(envContent, 'TELEGRAM_BOT_TOKEN', botToken);
    envContent = setEnvValue(envContent, 'TELEGRAM_BOT_USERNAME', botUsername);
    envContent = setEnvValue(envContent, 'NEXT_PUBLIC_TELEGRAM_BOT_USERNAME', botUsername);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(envPath, envContent);

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –∏ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
    if (process.env.NODE_ENV === 'production') {
      setupBotAsync(botToken, botUsername).catch(error => {
        console.error('Error setting up bot:', error);
      });
    } else {
      console.log('‚è≠Ô∏è Skipping webhook setup for development mode');
    }

    return NextResponse.json({
      success: true,
      message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –í–µ–±—Ö—É–∫ –∏ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è...',
    });

  } catch (error) {
    console.error('Update Telegram settings error:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

function getEnvValue(envContent: string, key: string): string | null {
  const regex = new RegExp(`^${key}=(.*)$`, 'm');
  const match = envContent.match(regex);
  return match ? match[1] : null;
}

function setEnvValue(envContent: string, key: string, value: string): string {
  const regex = new RegExp(`^${key}=.*$`, 'm');

  if (envContent.match(regex)) {
    // –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
    return envContent.replace(regex, `${key}=${value}`);
  } else {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    return envContent + `\n${key}=${value}`;
  }
}

async function setupBotAsync(botToken: string, botUsername: string): Promise<void> {
  try {
    console.log('Setting up Telegram bot completely...');

    const isProduction = process.env.NODE_ENV === 'production';

    if (isProduction) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
      const baseUrl = `https://${process.env.VERCEL_URL || 'dnrtop.ru'}`;
      const webhookUrl = `${baseUrl}/api/auth/telegram/webhook`;

      console.log(`Setting webhook to: ${webhookUrl}`);

      // –®–∞–≥ 1: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
      const webhookResponse = await fetch(
        `https://api.telegram.org/bot${botToken}/setWebhook`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            url: webhookUrl,
            max_connections: 1,
            drop_pending_updates: true,
          }),
        }
      );

      const webhookResult = await webhookResponse.json();

      if (!webhookResult.ok) {
        console.error('‚ùå Failed to set webhook:', webhookResult);
        throw new Error(`Failed to set webhook: ${webhookResult.description}`);
      }

      console.log('‚úÖ Webhook set successfully');
    } else {
      console.log('‚è≠Ô∏è Skipping webhook setup for development mode');
    }

    // –®–∞–≥ 2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    const commandsResponse = await fetch(
      `https://api.telegram.org/bot${botToken}/setMyCommands`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          commands: [
            {
              command: 'start',
              description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º'
            },
            {
              command: 'auth',
              description: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ'
            }
          ]
        }),
      }
    );

    const commandsResult = await commandsResponse.json();

    if (commandsResult.ok) {
      console.log('‚úÖ Bot commands set successfully');
    } else {
      console.warn('‚ö†Ô∏è Failed to set bot commands:', commandsResult);
      // –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
    }

    // –®–∞–≥ 3: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
    const descriptionResponse = await fetch(
      `https://api.telegram.org/bot${botToken}/setMyDescription`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          description: '–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ —á–µ—Ä–µ–∑ Telegram'
        }),
      }
    );

    if (descriptionResponse.ok) {
      console.log('‚úÖ Bot description set successfully');
    }

    console.log('üéâ Bot setup completed successfully');

  } catch (error) {
    console.error('Error setting up bot:', error);
    throw error;
  }
}