import { NextRequest, NextResponse } from 'next/server';
import { dbGet, dbRun } from '@/lib/db';
import { initializeDatabase } from '@/lib/init-db';
import jwt from 'jsonwebtoken';

export async function POST(request: NextRequest) {
  try {
    const { botToken, botUsername } = await request.json();

    if (!botToken || !botUsername) {
      return NextResponse.json(
        { error: 'Bot token –∏ username –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    console.log('üöÄ Starting Telegram authentication simulation...');

    // –®–∞–≥ 1: –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
    try {
      const botResponse = await fetch(`https://api.telegram.org/bot${botToken}/getMe`);
      const botData = await botResponse.json();

      if (!botData.ok) {
        return NextResponse.json({
          error: `–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: ${botData.description}`,
        }, { status: 400 });
      }

      console.log('‚úÖ Bot is active:', botData.result.username);

    } catch (error) {
      return NextResponse.json({
        error: '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.',
      }, { status: 400 });
    }

    // –®–∞–≥ 2: –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤ –±–æ—Ç–µ)
    await initializeDatabase();

    const testUserData = {
      id: Math.floor(Math.random() * 1000000) + 1000000, // –°–ª—É—á–∞–π–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∞
      first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
      last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      username: 'test_user_' + Date.now(),
      auth_date: Math.floor(Date.now() / 1000)
    };

    console.log('Creating test user:', testUserData);

    // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUser = await dbGet('SELECT * FROM users WHERE telegram_id = ?', [testUserData.id]);

    let user;
    let isNewUser = false;

    if (existingUser) {
      console.log('Updating existing test user');
      await dbRun(
        `UPDATE users SET
         telegram_username = ?,
         telegram_first_name = ?,
         telegram_last_name = ?,
         name = COALESCE(name, ?)
         WHERE telegram_id = ?`,
        [testUserData.username, testUserData.first_name, testUserData.last_name,
         `${testUserData.first_name} ${testUserData.last_name}`.trim(), testUserData.id]
      );

      user = await dbGet('SELECT * FROM users WHERE telegram_id = ?', [testUserData.id]);
    } else {
      console.log('Creating new test user');
      const result = await dbRun(
        `INSERT INTO users (
          telegram_id, telegram_username, telegram_first_name,
          telegram_last_name, name, auth_method
        ) VALUES (?, ?, ?, ?, ?, ?)`,
        [testUserData.id, testUserData.username, testUserData.first_name,
         testUserData.last_name, `${testUserData.first_name} ${testUserData.last_name}`.trim(), 'telegram']
      );

      user = await dbGet('SELECT * FROM users WHERE id = ?', [result.lastID]);
      isNewUser = true;
    }

    // –®–∞–≥ 4: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { userId: user.id, telegramId: user.telegram_id },
      process.env.NEXTAUTH_SECRET || 'your-secret-key',
      { expiresIn: '7d' }
    );

    console.log('‚úÖ Test authentication completed successfully');
    console.log('Test user created:', user);

    return NextResponse.json({
      success: true,
      message: `–°–∏–º—É–ª—è—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–∞! –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.`,
      test_user: {
        id: user.id,
        name: user.name,
        telegram_id: user.telegram_id,
        telegram_username: user.telegram_username,
      },
      token,
      is_new: isNewUser,
      simulation_steps: [
        '‚úÖ –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω',
        '‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω—ã',
        '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
        '‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
        '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
      ]
    });

  } catch (error) {
    console.error('Simulation error:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' },
      { status: 500 }
    );
  }
}